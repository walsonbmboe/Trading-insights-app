AWSTemplateFormatVersion: '2010-09-09'
Description: 'TradingEdge Analytics Platform - Main Infrastructure Stack (EC2-backed ECS for Free Tier)'

Parameters:
  ProjectName:
    Type: String
    Default: 'tradingedge'
    Description: 'Project name for resource naming'
  
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues: [dev, staging, prod]
    Description: 'Environment name'
  
  DatabaseUsername:
    Type: String
    Default: 'tradingadmin'
    Description: 'Database master username'
    MinLength: 8
    MaxLength: 16
  
  DatabasePassword:
    Type: String
    NoEcho: true
    Description: 'Database master password'
    Fn::Sub: "{{resolve:secretsmanager:${DatabaseSecretArn}:SecretString:password}}"
    MinLength: 8
    MaxLength: 41
    ConstraintDescription: 'Must contain 8-41 characters'

Resources:
  # --- (VPC, Subnets, IGW, Route Tables, SGs, S3, ECR, RDS etc remain same as your template) ---
  # Keeping your existing resources unchanged for networking + RDS + ALB

  # ECS Cluster (No Fargate)
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Sub '${ProjectName}-${Environment}-cluster'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-cluster'

  # IAM Role for ECS Instances
  ECSInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-ecs-instance-role'

  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref ECSInstanceRole

  # Launch Template for ECS Instances
  ECSLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${ProjectName}-${Environment}-ecs-lt'
      LaunchTemplateData:
        InstanceType: t2.micro
        ImageId: !Ref ECSAMI
        IamInstanceProfile:
          Arn: !GetAtt ECSInstanceProfile.Arn
        SecurityGroupIds:
          - !Ref ECSSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            echo ECS_CLUSTER=${ProjectName}-${Environment}-cluster >> /etc/ecs/ecs.config
            yum update -y
            start ecs

  # Latest ECS-Optimized Amazon Linux 2 AMI
  ECSAMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

  # Auto Scaling Group for ECS EC2 instances
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      LaunchTemplate:
        LaunchTemplateId: !Ref ECSLaunchTemplate
        Version: !GetAtt ECSLaunchTemplate.LatestVersionNumber
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-ecs-instance'
          PropagateAtLaunch: true

  # CloudWatch Log Groups (same as before)
  FrontendLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/ecs/${ProjectName}-${Environment}-frontend'
      RetentionInDays: 7

  BackendLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/ecs/${ProjectName}-${Environment}-backend'
      RetentionInDays: 7

Outputs:
  ECSClusterName:
    Description: 'ECS Cluster Name'
    Value: !Ref ECSCluster
    Export:
      Name: !Sub '${ProjectName}-${Environment}-cluster-name'

  ECSAutoScalingGroupName:
    Description: 'ECS Auto Scaling Group Name'
    Value: !Ref ECSAutoScalingGroup
    Export:
      Name: !Sub '${ProjectName}-${Environment}-ecs-asg-name'
